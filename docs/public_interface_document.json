{
  "package_name": "com.global_burger.for_tamagochi",
  "project_description": "A Tamagotchi-style mobile application that allows users to create, care for, and interact with a virtual pet. The app provides a comprehensive pet management system with features like feeding, playing, and monitoring pet health. Key functionalities include pet creation, status tracking, interactive pet actions, a pet shop, and detailed status dialogs. The application leverages Stacked architecture with robust state management and modular service design.",
  "architecture_overview": "Implemented using Stacked architecture with a clear separation of concerns. The application is structured around ViewModels, Services, and Views, utilizing dependency injection via StackedLocator. Core components include PetService for managing pet lifecycle, PetRepository for data persistence, and multiple specialized widgets for rendering pet interactions. The architecture supports modular design, easy extensibility, and clean separation between UI and business logic.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for managing the bottom sheet UI in the Flutter application. It sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
      "class_diagram": "@startuml\n\nclass BottomSheetService {\n  + setCustomSheetBuilders(builders: Map<BottomSheetType, SheetBuilder>)\n}\n\nclass BottomSheetType {\n  + notice\n}\n\ninterface SheetBuilder {\n  + (context: BuildContext, request: SheetRequest, completer: SheetCompleter)\n}\n\nclass NoticeSheet {\n  + (request: SheetRequest, completer: SheetCompleter)\n}\n\nBottomSheetService --> BottomSheetType\nBottomSheetService --> SheetBuilder\nNoticeSheet .> SheetBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for different types of bottom sheets, allowing the application to display various types of bottom sheets as needed.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing within the Flutter application. It defines the available routes, the corresponding views, and provides utility methods to navigate between these views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension on NavigationService {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView screen.",
          "parameters": [
            "int?",
            "bool",
            "Map<String, String>?",
            "Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)?"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/views/home/home_view.dart",
        "package:my_app/ui/views/startup/startup_view.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for analytics functionality in the application. It encapsulates the implementation of analytics tracking and provides a centralized interface for managing analytics-related operations.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of reusable color constants that represent the primary color palette of the application. These colors are used throughout the UI to ensure a consistent and branded visual experience.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The NoticeSheetModel class is responsible for managing the state and behavior of the notice bottom sheet UI component in the application. It provides the core functionality and business logic for displaying and interacting with the notice sheet.",
      "class_diagram": "@startuml\nclass NoticeSheetModel {\n  +showNotice()\n  +dismissNotice()\n  +isLoading : bool\n  +noticeMessage : String\n}\n@enduml",
      "methods": [
        {
          "name": "showNotice",
          "description": "Displays the notice bottom sheet with the specified message.",
          "parameters": [
            "message"
          ],
          "return_type": "void"
        },
        {
          "name": "dismissNotice",
          "description": "Dismisses the currently displayed notice bottom sheet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of common UI helper functions and constants that are used throughout the Flutter application's user interface. It serves as a centralized location for managing and accessing various UI-related utilities, ensuring consistency and reusability across the codebase.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(height: double): Widget\n  + screenWidth(context: BuildContext): double\n  + screenHeight(context: BuildContext): double\n  + screenHeightFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + screenWidthFraction(context: BuildContext, dividedBy: int, offsetBy: double, max: double): double\n  + halfScreenWidth(context: BuildContext): double\n  + thirdScreenWidth(context: BuildContext): double\n  + quarterScreenWidth(context: BuildContext): double\n  + getResponsiveHorizontalSpaceMedium(context: BuildContext): double\n  + getResponsiveSmallFontSize(context: BuildContext): double\n  + getResponsiveMediumFontSize(context: BuildContext): double\n  + getResponsiveLargeFontSize(context: BuildContext): double\n  + getResponsiveExtraLargeFontSize(context: BuildContext): double\n  + getResponsiveMassiveFontSize(context: BuildContext): double\n  + getResponsiveFontSize(context: BuildContext, fontSize: double, max: double): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant Widget that provides a tiny horizontal space.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a Widget with a specified vertical space.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that calculates a responsive font size based on the screen width.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The NoticeSheet class is responsible for displaying a bottom sheet with a notice or alert message to the user. It is part of the UI layer of the application and is used to present important information or updates to the user in a modal dialog.",
      "class_diagram": "@startuml\n  class NoticeSheet {\n    + NoticeSheet({required this.completer, required this.request})\n    + Widget builder(BuildContext context, NoticeSheetModel viewModel, Widget? child)\n    + NoticeSheetModel viewModelBuilder(BuildContext context)\n  }\n\n  class NoticeSheetModel {\n    # NoticeSheetModel()\n  }\n\n  NoticeSheet --> NoticeSheetModel\n  @enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the NoticeSheet, which includes the title, description, and any other relevant content.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the NoticeSheetModel, which is used to manage the state and logic of the NoticeSheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file contains the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\nInfoAlertDialogModel -[hidden]- BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class in this file is responsible for the initial startup screen of the application. It is the main entry point for the user when they launch the app, displaying the app's logo and a loading indicator while the app's startup logic is being executed.",
      "class_diagram": "@startuml\nclass StartupView {\n  + builder(BuildContext, StartupViewModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): StartupViewModel\n  + onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  + runStartupLogic(): void\n}\n\nStartupView --> StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the `StartupViewModel` to be used by the `StartupView`.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the app's startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "my_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the initial startup logic of the application. It is responsible for delaying the application launch by a few seconds and then navigating to the home view, which is the main entry point of the application.",
      "class_diagram": "@startuml\n  class StartupViewModel {\n    -_navigationService : NavigationService\n    +runStartupLogic() : Future\n  }\n  @enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "This method is responsible for the core startup logic of the application. It delays the application launch by 3 seconds and then navigates to the home view using the NavigationService.",
          "parameters": [
            "None"
          ],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This file contains a set of constant values and data structures that are used throughout the application. It serves as a centralized repository for global configuration and settings, providing a consistent and easily accessible way to manage application-wide constants.",
      "class_diagram": "@startuml\n' Enumerations and Constants\npublicConstant totalOnboarding : int\npublicConstant onBoardingHeaderTag : String\npublicConstant pathCompliantStatement : String\npublicConstant pathTermsOfServices : String\npublicConstant defaultContactEmail : String\npublicConstant defaultContactPhone : String\npublicConstant introYoutubeId : String\npublicConstant defaultLanguagesList : List<Map<String, String>>\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines an InfoAlertDialog class, which is responsible for displaying an informative alert dialog with a title, description, and a confirmation button. The primary purpose of this class is to provide a reusable and customizable way to present important information to the user within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog *-- InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The main build method that constructs the UI for the InfoAlertDialog. It takes the DialogRequest, DialogResponse completer, and the view model as input and returns the final widget.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "A method that creates and returns an instance of the InfoAlertDialogModel, which is used to manage the state and logic of the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the service locator in a Flutter application built using the Stacked architecture pattern. The service locator is a crucial component that allows different parts of the application to access and interact with various services and dependencies, promoting a modular and decoupled design.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the necessary services and dependencies with the service locator. It allows the application to access and use these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the dialog system used throughout the application. It defines the available dialog types, registers the custom dialog builders, and provides a centralized way to interact with the dialog service.",
      "class_diagram": "@startuml\n'Hide the stereotype since it is the default for class\n'hide circle\n'hide methods\n'skinparam classAttributeIconSize 0\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (BuildContext, DialogRequest, DialogCompleter) => Widget\n}\n\nclass DialogService {\n  + registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\n'Relationships\nDialogType *-- DialogBuilder : builds\nDialogService o-- DialogBuilder : uses\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering the custom dialog builders for each dialog type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "A ViewModel for the home screen that manages counter state and provides user interaction methods for displaying dialogs and bottom sheets in a Flutter application",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  -int _counter\n  +incrementCounter()\n  +showDialog()\n  +showBottomSheet()\n}\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the internal counter and triggers UI rebuild",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with dynamic counter-based content",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with predefined content",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "stacked",
        "stacked_services",
        "app.bottomsheets.dart",
        "app.dialogs.dart",
        "app.locator.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "Application entry point for a Tamagotchi-style mobile application that sets up core app configuration, handles initialization, and provides error management for the Flutter app startup process",
      "class_diagram": "@startuml\nclass Main {\n  +void main()\n  -void runZonedGuarded()\n}\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "Primary application entry point that initializes Flutter environment, sets device orientation, configures dependencies, and launches the app",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "dart:async",
        "flutter/material.dart",
        "flutter/services.dart",
        "for_tamagochi/app/app.bottomsheets.dart",
        "for_tamagochi/app/app.dialogs.dart",
        "for_tamagochi/app/app.locator.dart",
        "features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "A startup screen view responsible for initializing the application and displaying a loading state during initial setup. It provides a centralized entry point for launching the app with a branded loading experience.",
      "class_diagram": "@startuml\nclass StartupView {\n  +builder(BuildContext, StartupViewModel)\n  +viewModelBuilder(BuildContext)\n  +onViewModelReady(StartupViewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the UI for the startup screen, showing the app name and a loading indicator",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the associated ViewModel for startup logic and initialization",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Triggers initial startup logic after the view is rendered",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "startup_viewmodel.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/pet_status/pet_status_dialog.dart",
      "description": "A dialog component for displaying a pet's current status in a Tamagochi-like application, providing users with detailed information about their virtual pet's well-being, mood, and current condition",
      "class_diagram": "@startuml\nclass PetStatusDialog {\n  +request: DialogRequest\n  +completer: Function(DialogResponse)\n  +builder(context, viewModel)\n  +viewModelBuilder(context)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the visual layout of the pet status dialog, displaying pet name, status emoji, message, and details",
          "parameters": [
            "BuildContext",
            "PetStatusDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates the view model for the pet status dialog, initializing with the current pet data",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PetStatusDialogModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "for_tamagochi/models/pet/pet_model.dart",
        "for_tamagochi/ui/common/app_colors.dart",
        "for_tamagochi/ui/dialogs/pet_status/pet_status_dialog_model.dart"
      ]
    },
    {
      "name": "lib/services/pet_service.dart",
      "description": "A service layer for managing a virtual pet's lifecycle, tracking and updating its status, and handling core interactions like feeding, playing, and sleeping. This service provides business logic for maintaining a tamagotchi-style pet game experience.",
      "class_diagram": "@startuml\nclass PetService {\n  - _petRepository: PetRepository\n  + getCurrentPet(): Pet\n  + createPet(name: String)\n  + feedPet()\n  + playWithPet()\n  + putPetToSleep()\n}\n@enduml",
      "methods": [
        {
          "name": "getCurrentPet",
          "description": "Retrieves the current pet, updating its status and stats based on time elapsed",
          "parameters": null,
          "return_type": "Future<Pet?>"
        },
        {
          "name": "createPet",
          "description": "Creates a new pet with the specified name and saves it to the repository",
          "parameters": [
            "name"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "feedPet",
          "description": "Increases pet's hunger level and updates last fed timestamp",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "playWithPet",
          "description": "Increases pet's happiness while decreasing energy, and updates last played timestamp",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "putPetToSleep",
          "description": "Restores pet's energy and updates last slept timestamp",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "models/pet/pet_model.dart",
        "models/pet/pet_status.dart",
        "repositories/pet_repository.dart",
        "utils/const/const.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/pet_status/pet_status_dialog_model.dart",
      "description": "A ViewModel for displaying the current status and health details of a virtual pet in a dialog, providing user-friendly messages and diagnostic information about the pet's condition.",
      "class_diagram": "@startuml\nclass PetStatusDialogModel {\n  - Pet pet\n  + String statusMessage\n  + String statusDetails\n}\n@enduml",
      "methods": [
        {
          "name": "statusMessage",
          "description": "Generates a human-readable status message based on the pet's current overall status",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "statusDetails",
          "description": "Provides detailed breakdown of the pet's current health metrics and potential issues",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:for_tamagochi/models/pet/pet_model.dart",
        "package:for_tamagochi/models/pet/pet_status.dart"
      ]
    },
    {
      "name": "lib/ui/views/pet/pet_view.dart",
      "description": "A Flutter view responsible for displaying and interacting with a virtual pet (Tamagotchi), providing a comprehensive interface for pet management and interaction",
      "class_diagram": "@startuml\nclass PetView {\n  -bool isNewPet\n  +Widget builder(BuildContext context, PetViewModel viewModel)\n  +PetViewModel viewModelBuilder(BuildContext context)\n  +void onViewModelReady(PetViewModel viewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the main UI for pet interaction, handling different states like loading, error, and pet display",
          "parameters": [
            "BuildContext",
            "PetViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates and initializes the PetViewModel for managing pet state and interactions",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "PetViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Triggers initialization of the pet, potentially creating a new pet or loading an existing one",
          "parameters": [
            "PetViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart",
        "pet_viewmodel.dart",
        "pet_stats_widget.dart",
        "pet_actions_widget.dart",
        "pet_animation_widget.dart"
      ]
    },
    {
      "name": "lib/ui/views/pet/widgets/pet_actions_widget.dart",
      "description": "A widget that provides interactive action buttons for a digital pet's core interactions: feeding, playing, and sleeping, with state-aware disabling when the pet is dead",
      "class_diagram": "@startuml\nclass PetActionsWidget {\n  - onFeed: VoidCallback\n  - onPlay: VoidCallback\n  - onSleep: VoidCallback\n  - petStatus: PetStatus\n  + build(context): Widget\n}\nclass _ActionButton {\n  - icon: IconData\n  - label: String\n  - color: Color\n  - onPressed: VoidCallback\n  + build(context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders action buttons for pet interactions with conditional disabling based on pet status",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "models/pet/pet_status.dart",
        "ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/ui/views/pet/pet_viewmodel.dart",
      "description": "View model for managing pet interactions and lifecycle in a virtual pet/Tamagochi-style application, handling pet creation, status updates, and user interactions",
      "class_diagram": "@startuml\nclass PetViewModel {\n  -_petService: PetService\n  -_dialogService: DialogService\n  -_analyticService: AnalyticService\n  +initialize(isNewPet: bool)\n  +feedPet()\n  +playWithPet()\n  +putPetToSleep()\n}\n@enduml",
      "methods": [
        {
          "name": "initialize",
          "description": "Entry point for pet setup - creates new pet or loads existing pet",
          "parameters": [
            "isNewPet"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "feedPet",
          "description": "Handles feeding interaction with the virtual pet",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "playWithPet",
          "description": "Handles play interaction with the virtual pet",
          "parameters": null,
          "return_type": "Future<void>"
        },
        {
          "name": "putPetToSleep",
          "description": "Handles putting the virtual pet to sleep",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked",
        "stacked_services",
        "pet_service.dart",
        "analytic_service.dart",
        "pet_model.dart"
      ]
    },
    {
      "name": "lib/ui/views/pet/widgets/pet_animation_widget.dart",
      "description": "A Flutter widget responsible for rendering a pet's animated visual representation with dynamic status, color, and bounce effect to enhance user engagement in a virtual pet application",
      "class_diagram": "@startuml\nclass PetAnimationWidget {\n  - PetStatus status\n  - String name\n  + build()\n  - _getStatusColor()\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the visual representation of the pet with animated emoji, name, and status",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "_getStatusColor",
          "description": "Maps pet status to corresponding color representation",
          "parameters": null,
          "return_type": "Color"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "for_tamagochi/models/pet/pet_status.dart",
        "for_tamagochi/ui/common/app_colors.dart"
      ]
    },
    {
      "name": "lib/ui/views/pet/widgets/pet_stats_widget.dart",
      "description": "A UI widget responsible for displaying a comprehensive visual representation of a pet's key stats in a Tamagochi-like application, showing health, hunger, happiness, and energy levels through color-coded progress bars",
      "class_diagram": "@startuml\nclass PetStatsWidget {\n  -Pet pet\n  +build(BuildContext context): Widget\n  -_buildStatBar(String, int, Color, IconData): Widget\n  -_getStatColor(int): Color\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the primary UI for displaying pet statistics as a card with progress bars",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildStatBar",
          "description": "Creates an individual stat bar with label, icon, percentage, and color-coded progress indicator",
          "parameters": [
            "String label",
            "int value",
            "Color color",
            "IconData icon"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_getStatColor",
          "description": "Determines the color of a stat based on its current value (critical, warning, or healthy)",
          "parameters": [
            "int value"
          ],
          "return_type": "Color"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "models/pet/pet_model.dart",
        "ui/common/app_colors.dart",
        "utils/const/const.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/pet_shop/pet_shop_sheet.dart",
      "description": "A bottom sheet UI component for a virtual pet game's shop, allowing players to purchase items that restore pet stats like hunger, health, and happiness",
      "class_diagram": "@startuml\nclass PetShopSheet {\n  +completer: Function(SheetResponse)\n  +request: SheetRequest\n  +builder(context, viewModel, child): Widget\n  -_buildShopItem(name, description, icon, onTap): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the visual layout of the pet shop bottom sheet with purchasable items",
          "parameters": [
            "BuildContext",
            "PetShopSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildShopItem",
          "description": "Creates a standardized shop item tile with name, description, icon, and purchase button",
          "parameters": [
            "String",
            "String",
            "IconData",
            "VoidCallback"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "for_tamagochi/ui/common/app_colors.dart",
        "for_tamagochi/ui/bottom_sheets/pet_shop/pet_shop_sheet_model.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/pet_shop/pet_shop_sheet_model.dart",
      "description": "A view model for managing pet shop interactions in a Tamagochi-like mobile application, providing a structured approach to handle item purchasing logic and potential future shop features",
      "class_diagram": "@startuml\nclass PetShopSheetModel {\n  -_petService: PetService\n  +purchaseItem(itemId: String)\n}\n@enduml",
      "methods": [
        {
          "name": "purchaseItem",
          "description": "Placeholder method for purchasing items in the pet shop, currently returning a 'coming soon' message",
          "parameters": [
            "itemId"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked",
        "for_tamagochi/models/pet/pet_model.dart",
        "for_tamagochi/services/pet_service.dart",
        "for_tamagochi/app/app.locator.dart"
      ]
    },
    {
      "name": "lib/models/pet/pet_status.dart",
      "description": "An enum representing the different possible status states for a virtual pet, with human-readable display names and corresponding emojis to enhance user experience in a pet simulation or digital companion application",
      "class_diagram": "@startuml\nenum PetStatus {\n  + happy\n  + hungry\n  + sick\n  + tired\n  + dead\n  + displayName(): String\n  + emoji(): String\n}\n@enduml",
      "methods": [
        {
          "name": "displayName",
          "description": "Converts enum value to a human-readable status label",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "emoji",
          "description": "Provides a corresponding emoji representation for each pet status",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/models/pet/pet_model.dart",
      "description": "Defines a data model representing a virtual pet in a Tamagochi-like application, managing the pet's core attributes, lifecycle, and state transformations",
      "class_diagram": "@startuml\nclass Pet {\n  +id: String\n  +name: String\n  +health: int\n  +hunger: int\n  +happiness: int\n  +energy: int\n  +copyWith(): Pet\n  +initial(): Pet\n}\nenum PetStatus\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new Pet instance with optional updated attributes, enabling immutable state updates",
          "parameters": [
            "id?",
            "name?",
            "health?",
            "hunger?",
            "happiness?",
            "energy?",
            "lastFed?",
            "lastPlayed?",
            "lastSlept?",
            "status?"
          ],
          "return_type": "Pet"
        },
        {
          "name": "initial",
          "description": "Factory method for creating a new Pet with default starting attributes and generated ID",
          "parameters": [
            "name"
          ],
          "return_type": "Pet"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart",
        "package:for_tamagochi/models/pet/pet_status.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "A base view model for the entire application, providing fundamental state management and lifecycle capabilities using the Stacked architecture pattern",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "constructor",
          "description": "Creates an initial application view model with base state management capabilities",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "Manages the initial startup logic and navigation flow for the application, responsible for performing pre-application initialization and routing to the first screen",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  -_navigationService: NavigationService\n  +runStartupLogic(): Future\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Executes initial startup tasks and determines the first navigation route, typically after a brief delay for potential splash screen or initialization processes",
          "parameters": null,
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "stacked",
        "stacked_services",
        "app.locator",
        "app.router"
      ]
    },
    {
      "name": "lib/repositories/pet_repository.dart",
      "description": "A data management repository for handling pet-related data storage and retrieval, providing CRUD operations for a virtual pet in a Tamagochi-like application",
      "class_diagram": "@startuml\nclass PetRepository {\n  -Pet _currentPet\n  +Future<Pet?> getPet()\n  +Future<void> savePet(Pet pet)\n  +Future<void> updatePet(Pet pet)\n  +Future<void> deletePet()\n}\n@enduml",
      "methods": [
        {
          "name": "getPet",
          "description": "Retrieves the currently stored pet object, serving as a data access method",
          "parameters": null,
          "return_type": "Future<Pet?>"
        },
        {
          "name": "savePet",
          "description": "Stores a new pet object in the repository's in-memory storage",
          "parameters": [
            "pet"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "updatePet",
          "description": "Updates an existing pet object with new data in the repository",
          "parameters": [
            "pet"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "deletePet",
          "description": "Removes the current pet from the repository, clearing its state",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "pet_model.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Root application view configuration responsible for setting up global app navigation, routing, and core UI behaviors like keyboard dismissal and text scaling",
      "class_diagram": "@startuml\nclass AppView {\n  + build(BuildContext context)\n}\nclass _App {\n  + build(BuildContext context, AppViewModel viewModel)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Configures the root MaterialApp with initial routing, navigation services, and global UI behaviors",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart",
        "app/app.router.dart",
        "features/app/app_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "A Flutter view component representing the home screen, utilizing the Stacked architecture pattern to manage user interactions and state through a ViewModel",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(context, viewModel, child)\n  +viewModelBuilder(context)\n}\nclass HomeViewModel {\n  +incrementCounter()\n  +showDialog()\n  +showBottomSheet()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the visual layout of the home screen with a counter, buttons, and interactive elements",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates and provides the HomeViewModel instance for state management",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "stacked/stacked.dart",
        "home_viewmodel.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant AppView\nparticipant StartupView\nparticipant PetView\nparticipant PetViewModel\nparticipant PetService\n\nUser -> AppView: Launch App\nAppView -> StartupView: Initialize\nStartupView -> PetView: Navigate\nUser -> PetView: Interact with Pet\nPetView -> PetViewModel: Trigger Action\nPetViewModel -> PetService: Update Pet Status\nPetService --> PetViewModel: Return Updated Pet\nPetViewModel --> PetView: Update UI\n@enduml",
  "state_management_flow": "Utilizing Stacked framework's BaseViewModel for reactive state management. Each view (PetView, HomeView) has a corresponding ViewModel that manages its state. ViewModels interact with services like PetService and handle user interactions, triggering UI updates through reactive programming. State changes are propagated through ViewModels, ensuring a unidirectional data flow and maintaining a clear separation between UI rendering and business logic.",
  "navigation_flow": "Navigation is managed through Stacked router, defined in app.router.dart. The primary flow starts with AppView, transitions through StartupView, and then to the main PetView. The NavigationService handles screen transitions, with predefined routes allowing seamless navigation between different screens. Route transitions support parameter passing and can include custom transition animations, providing a flexible and type-safe navigation mechanism."
}